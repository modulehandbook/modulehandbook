# syntax=docker/dockerfile:1
# check=error=true

# This Dockerfile is designed for production, not development. Use with Kamal or build'n'run by hand:
# docker build -t rails80_testapp .
# docker run -d -p 80:80 -e RAILS_MASTER_KEY=<value from config/master.key> --name rails80_testapp rails80_testapp

# For a containerized dev environment, see Dev Containers: https://guides.rubyonrails.org/getting_started_with_devcontainer.html

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.3.6
FROM docker.io/library/ruby:$RUBY_VERSION-alpine3.21 AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
# replacements for alpine: libjemalloc2 -> jemalloc, libvips -> vips, sqlite3 -> sqlite
RUN apk update && \
    apk add --no-cache curl jemalloc vips tzdata  \
            nodejs libpq


# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development:test" \
    EDITOR="vi"


# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
# replacements for alpine: build-essential -> build-base, pkg-config -> pkgconfig
RUN apk update && \
    apk add build-base pkgconfig postgresql-dev

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
# RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile
RUN RAILS_MASTER_KEY=05f8b6761fa3108933c6190622a24214
RUN echo $RAILS_MASTER_KEY 
RUN ./bin/rails assets:precompile




# Final stage for app image
FROM base AS debug

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security


RUN addgroup --system --gid 1000 rails && \
    adduser rails -u 1000 -G rails -h /rails -s /bin/ash -D  && \
    chown -R rails:rails bin  && \
    chown -R rails:rails db log storage tmp

# debug image is useful for debugging as user is not set

FROM debug

USER rails:rails

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint-alpine"]

# Start server via Thruster by default, this can be overwritten at runtime
# EXPOSE 80
# CMD ["./bin/thrust", "./bin/rails", "server"]
CMD ["./bin/rails", "server"]
